a<-c("abind","acepack","BiocGenerics","BiocInstaller","bitops","BradleyTerry2","brglm","car","caret","caTools",
"colorspace","DBI","depmixS4","dichromat","digest","e1071","EBImage","ElemStatLearn","evaluate","fBasics",
"fftwtools","foreach","formatR","Formula","gam","gbm","gdata","ggplot2","gmp","gplots","gridExtra","gss",
"gtable","gtools","HH","highr","Hmisc","htmltools","httpuv","ISLR","iterators","jpeg","jsonlite","kernlab",
"knitr","labeling","lattice","latticeExtra","leaps","lme4","lmtest","locfit","magrittr","markdown","MASS",
"mda","mime","minqa","mnormt","multcomp","munsell","mvtnorm","neuralnet","nloptr","obliqueRF","partykit",
"pbkrtest","pls","plyr","png","profileModel","proto","psych","quantreg","R6","randomForest","RColorBrewer",
"Rcpp","RcppEigen","reshape2","rJava","rmarkdown","Rmpfr","ROCR","Rsolnp","RSQLite","sandwich","scales","shiny",
"SparseM","stabledist","stringi","stringr","TH.data","tiff","timeDate","timeSeries","truncnorm","vcd","wordnet",
"xtable","yaml","zoo","base","boot","class","cluster","codetools","compiler","datasets","foreign","graphics",
"grDevices","grid","KernSmooth","lattice","MASS","Matrix","methods","mgcv","nlme","nnet","parallel","rpart",
"spatial","splines","stats","stats4","survival","tcltk","tools","translations","utils")
for (p in setdiff(a, installed.packages()[,"Package"]))
install.packages(p)
a<-vect(1,2,4,1,2,4)
b<-vect2(8,2)
a+b
a<- vect(1,2,4,1,2,4)
b<- vect2(8,2)
a+b
vect<- c(1,2,4,1,2,4)
vect2<- c(8,2)
a+b
vect<- c(1,2,4,1,2,4)
vect2<- c(8,2)
vect+vect2
vect<- c(1,2,4,1,2,4)
vect2<- c(8,2)
vect / vect2
vect<- c(1,2,4,1,2,4)
vect2<- c(8,2)
vect %% vect2
a<- c("Up","Down","Left","Right")
str(a)
c(is.factor(a),is.ordered(a))
a<- c("Up","Down","Left","Right")
str(a)
c(is.factor(a),is.ordered(a))
a<- factor(a,ordered = T)
a<- c("Up","Down","Left","Right")
str(a)
c(is.factor(a),is.ordered(a))
a<- factor(a,ordered = T)
str(a)
c(is.factor(a), is.ordered(a))
direction<- c("Up","Down","Left","Right")
str(direction)
c(is.factor(direction),is.ordered(direction))
direction<- factor(direction,ordered = T)
str(direction)
c(is.factor(direction), is.ordered(direction))
#values for A
a=c(1,2,3,4)
b=c(2,4,6,7)
nam=("Up","Down","Left","Right")
df=data.frame(a,b,nam)
#values for A
a=c(1,2,3,4)
b=c(2,4,6,7)
nam=c("Up","Down","Left","Right")
df=data.frame(a,b,nam)
df
df=data.frame(a,b,nam)
names(df)=c("Var1","Var2","Labels")
df
df$Var2[2]=10
df
#run linear regression model
lm.fit=lm(Var1~Var2,data=df)
summary(lm.fit)
plot(lm.fit)
plot(lm.fit,which=1:6)
plot(Var1,Var2)
plot(df$Var1,df$Var2)
install.packages(devtools)
"devtools"
install.packages("devtools")
install.packages("kernsmooth")
install.packages("KernSmooth")
load(KernSmooth)
library(KernSmooth)
x<-list(2,"a","b",TRUE)
x[[1]]
x
x<-1:4
y<-2
x+y
x<-c(17,14,4,5,13,12,10)
x[x>10]<-4
x
x<-c(17,14,4,5,13,12,10)
x
x[x>=11],-4
x[x>10]==4
x
x[x>=11]<-4
x
x<-c(17,14,4,5,13,12,10)
x[x==10]<-4
x
x<-c(17,14,4,5,13,12,10)
x
x[x==4]>10
x
cube<-function(x,n) {}
cube<-function(x,n) {
x^3
}
cube<-function(x,n) {x^3}
cube(3)
x<-1:10
if(x>5) {
x<-0
}
x<-1:10
if(x>5) {
x<-2:11
}
x<-1:10
if(x>5) {
x<-5
}
x<-1:10 {
if(x>5)
x<-0
}
x<-1:10
if(x>5) {
x<-0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
swirl()
swirl
swirl
swirl::
library("swirl")
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!=5
5!=7
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function <- function(x) {
x
}
submit()
submit()
boring_function('My first function!')
boring_function
submit()
my_vector<-c(4,5,10)
mean(my_vector)
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5).
remainder(divisor = 11, num = 5)
remainder(4,div=2)
args(remainder)
submit()
submit()
submit()
submit()
submit
submit()
submit()
submit()
submit()
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x),c(8,4,0))
evaluate(function(x){x},c(8,4,0))
evaluate(function(x){x=1},c(8,4,0))
evaluate(function(x=1){x},c(8,4,0))
evaluate(function(x)[x],c(8,4,0))
evaluate(function(x)[[x],c(8,4,0))
evaluate(function(x)[[x]],c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[0]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[2]},c(8,4,0))
?paste
("Programming", "is", "fun!")
paste("Programming", "is", "fun!")
exit
bye
library(datasets)
data(iris)
?iris
lapply(iris,mean)
iris
apply(iris[, 1:4], 2, mean)
apply(iris[,1],2,mean,species=
"virginica")
apply(iris[,1],2,mean)
apply(iris,2,mean)
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris, 1, mean)
mapply(iris)
str(mapply)
mapply(mean(iris),...,SIMPLIFY = TRUE,USE.NAMES = FALSE)
mapply(mean(iris),species=virginica,SIMPLIFY = TRUE,USE.NAMES = FALSE)
mapply(mean,species=virginica,SIMPLIFY = TRUE,USE.NAMES = FALSE)
mapply(mean,species="virginica",SIMPLIFY = TRUE,USE.NAMES = FALSE)
tapply(iris,species,mean)
tapply(iris,Species,mean)
tapply(iris,Species=virginica,mean)
tapply(iris,Species=virginica,mean)
iris[1]
iris[4]
iris[5]
iris$Species
tapply(iris,iris$Species=virginica,mean)
tapply(iris,iris$Species="virginica",mean)
tapply(iris,iris$Species,mean)
tapply(iris$Species,mean)
iris$Species
iris$Species[3]
iris$Species[virginica]
iris$Species["virginica"]
iris[species="virginica"]
u<-iris$Species
u
u[3]
u[,3]
u[101]
tapply(iris,u,mean)
tapply(iris,u[101:150],mean)
ncol(iris)
nrow(iris)
mean(u)
names(iris)
X<-iris$Species=='virginica'
x
tapply(x,'Sepal.Length',mean)
virginica<-subset(iris,Species == 'virginica')
apply(virginica,mean)
apply(virginica,1,mean)
apply(virginica,2,mean)
colMeans(virginica,)
colMeans(virginica)
virginica
?colMeans
colMeans(virginica, na.rm = FALSE, dims = 1)
colMeans(virginica[1:4], na.rm = FALSE, dims = 1)
library(datasets)
data(mtcars)
?mtcars
mtcars
>gl
?gl
str(tapply)
iris$Species
f<-iris$Species
f
x<-iris$Sepal.Length
tapply(x,f,mean)
s<-split(iris, iris$Species)
lapply(s,mean)
lapply(s,mean[1:4])
lapply(s,colMeans)
lapply(s,colMeans[[1:4]])
lapply(s,colMeans[1:4])
colMeans(s)
colMeans(s[1:4])
colMeans(s,na.rm = FALSE,dims = 1L)
sapply(s,mean)
sapply(s,mean[1])
sapply(s,mean(iris))
sapply(s,mean
)
s
tapply(iris,iris$Species,mean)
tapply(s,mean)
tapply(s,f,mean)
s
lapply(s,function(x) colMeans(x[c"Sepal.Length"])
lapply(s,function(x) colMeans(x[,c("Sepal.Length")])
)
lapply(s,colMeans(x[,1:4]))
lapply(s,colMeans([,1:4]))
lapply(s,colMeans(,1:4))
lapply(s,colMeans(x[1]))
lapply(s,colMeans(x[1:2]))
lapply(s,function(x) colMeans(x[,c("Sepal.Length")]))
lapply(s,function(iris) colMeans(iris[,c("Sepal.Length")]))
lapply(s,function(x) colMeans(x[,c("Sepal.Length")]))
lapply(s,function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
?c
?function(x)
)
?function
)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl,mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
ls
ls()
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
apply(iris[, 1:4], 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
source(makeCacheMatrix)
source("makeCacheMatrix")
getwd()
setwd("C:/Users/weba3148/Google Drive/Coursera/R Programming/ProgrammingAssignment2-master/ProgrammingAssignment2-master")
source("makeCachematrix")
getwd()
ls
ls()
lsit
dir
source("cacheMatrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix()
my_matrix
get$my_matrix
my_matrix get$matrix
get$matrix
matrix
clear
cacheSolve()
cacheSolve(my_matrix)
